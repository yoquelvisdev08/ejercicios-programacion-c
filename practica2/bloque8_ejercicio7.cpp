/*
 * ‚è±Ô∏è CRON√ìMETRO DE CICLISMO ‚è±Ô∏è
 * =========================
 * 
 * Bloque 8: Ejercicio 7
 * --------------------
 * Programa que define una estructura que indica el tiempo empleado por un ciclista
 * en una etapa. La estructura tiene tres campos: horas, minutos y segundos.
 * Calcula el tiempo total empleado en correr todas las etapas.
 *
 * Autor: Yoquelvis Abreu
 * Fecha: Marzo 2024
 */

#include <iostream>
#include <iomanip>
#include <limits>
using namespace std;

// Constantes para colores (ANSI escape codes)
const string COLOR_RESET = "\033[0m";
const string COLOR_TITLE = "\033[1;36m";  // Cyan brillante
const string COLOR_HIGHLIGHT = "\033[1;33m";  // Amarillo brillante
const string COLOR_INPUT = "\033[1;32m";  // Verde brillante
const string COLOR_INFO = "\033[1;34m";  // Azul brillante
const string COLOR_ERROR = "\033[1;31m";  // Rojo brillante
const string COLOR_RESULT = "\033[1;35m";  // Magenta brillante
const string COLOR_SUCCESS = "\033[1;92m";  // Verde claro brillante

// Definici√≥n de la estructura Tiempo
struct Tiempo {
    int horas;
    int minutos;
    int segundos;
};

// Funci√≥n para limpiar la pantalla
void limpiarPantalla() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}

// Funci√≥n para mostrar el banner del programa
void mostrarBanner() {
    cout << COLOR_TITLE << "\n";
    cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
    cout << "‚ïë        CRON√ìMETRO DE CICLISMO         ‚ïë\n";
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n" << COLOR_RESET;
}

// Funci√≥n para pedir un valor de tiempo con validaci√≥n
int pedirTiempo(const char* mensaje, int min, int max) {
    int valor;
    bool valido = false;
    
    do {
        cout << COLOR_HIGHLIGHT << mensaje << COLOR_INPUT;
        cin >> valor;
        cout << COLOR_RESET;
        
        if(cin.fail()) {
            cin.clear();
            cin.ignore(10000, '\n');
            cout << COLOR_ERROR << "   ‚ö†Ô∏è Error: Debe ingresar un n√∫mero v√°lido.\n\n" << COLOR_RESET;
        }
        else if(valor < min || valor > max) {
            cout << COLOR_ERROR << "   ‚ö†Ô∏è Error: El valor debe estar entre " << min << " y " << max << ".\n\n" << COLOR_RESET;
        }
        else {
            valido = true;
        }
    } while(!valido);
    
    return valor;
}

// Funci√≥n para formatear tiempo en formato HH:MM:SS
string formatearTiempo(const Tiempo& t) {
    char buffer[20];
    sprintf(buffer, "%02d:%02d:%02d", t.horas, t.minutos, t.segundos);
    return string(buffer);
}

// Funci√≥n para mostrar una barra de progreso
void mostrarProgreso(int actual, int total) {
    cout << "\nüìä Progreso: [";
    int porcentaje = (actual * 20) / total;
    for(int i = 0; i < 20; i++) {
        if(i < porcentaje) {
            cout << COLOR_SUCCESS << "‚ñà" << COLOR_RESET;
        } else {
            cout << "‚ñë";
        }
    }
    cout << "] " << (actual * 100) / total << "%\n\n";
}

// Funci√≥n para mostrar una visualizaci√≥n gr√°fica del tiempo total
void mostrarGraficoTiempo(const Tiempo& tiempo) {
    // Convertir todo a segundos para la visualizaci√≥n
    int segundos_totales = tiempo.horas * 3600 + tiempo.minutos * 60 + tiempo.segundos;
    
    // Determinar escala: cada bloque representa 10 minutos (600 segundos)
    int bloques = segundos_totales / 600;
    if (segundos_totales % 600 > 0) bloques++; // Redondeando hacia arriba
    
    cout << COLOR_INFO << "   Cada ‚ñà representa 10 minutos\n\n";
    cout << "   [";
    for(int i = 0; i < bloques; i++) {
        if(i % 6 == 0 && i > 0) {
            cout << COLOR_RESULT << "‚éÆ" << COLOR_INFO; // Marca cada hora
        }
        cout << COLOR_HIGHLIGHT << "‚ñà";
    }
    cout << COLOR_INFO << "] " << formatearTiempo(tiempo) << COLOR_RESET << "\n\n";
}

int main() {
    // Limpiar pantalla y mostrar banner
    limpiarPantalla();
    mostrarBanner();
    
    // Declaraci√≥n de variables
    int n; // N√∫mero de etapas
    Tiempo *etapas; // Arreglo din√°mico para almacenar los tiempos por etapa
    Tiempo total = {0, 0, 0}; // Tiempo total inicializado en cero
    
    // Explicaci√≥n del programa
    cout << "üìã DESCRIPCI√ìN: Este programa calcula el tiempo total empleado por un ciclista\n";
    cout << "               en varias etapas de una competici√≥n.\n\n";
    
    // Pedir cantidad de etapas con validaci√≥n
    do {
        cout << COLOR_HIGHLIGHT << "üö≤ Ingrese el n√∫mero de etapas: " << COLOR_INPUT;
        cin >> n;
        cout << COLOR_RESET;
        
        if(cin.fail()) {
            cin.clear();
            cin.ignore(10000, '\n');
            cout << COLOR_ERROR << "‚ö†Ô∏è Error: Debe ingresar un n√∫mero v√°lido.\n\n" << COLOR_RESET;
        }
        else if(n <= 0) {
            cout << COLOR_ERROR << "‚ö†Ô∏è Error: Debe registrar al menos una etapa.\n\n" << COLOR_RESET;
        }
    } while(n <= 0 || cin.fail());
    
    // Crear el arreglo din√°mico para las etapas
    etapas = new Tiempo[n];
    
    // Pedir datos para cada etapa
    for(int i = 0; i < n; i++) {
        cout << "\n" << COLOR_INFO << "‚è±Ô∏è ETAPA " << i+1 << " DE " << n << ":\n";
        cout << "---------------------\n" << COLOR_RESET;
        
        etapas[i].horas = pedirTiempo("   Horas: ", 0, 23);
        cout << "\n"; // Salto de l√≠nea entre inputs
        
        etapas[i].minutos = pedirTiempo("   Minutos: ", 0, 59);
        cout << "\n"; // Salto de l√≠nea entre inputs
        
        etapas[i].segundos = pedirTiempo("   Segundos: ", 0, 59);
        
        // Mostrar progreso
        mostrarProgreso(i + 1, n);
    }
    
    // Calcular el tiempo total
    for(int i = 0; i < n; i++) {
        total.horas += etapas[i].horas;
        total.minutos += etapas[i].minutos;
        total.segundos += etapas[i].segundos;
    }
    
    // Ajustar los minutos y segundos si son mayores o iguales a 60
    total.minutos += total.segundos / 60;
    total.segundos = total.segundos % 60;
    
    total.horas += total.minutos / 60;
    total.minutos = total.minutos % 60;
    
    // Limpiar pantalla y mostrar resultados
    limpiarPantalla();
    mostrarBanner();
    
    // Mostrar tabla de etapas
    cout << COLOR_HIGHLIGHT << "üìä REGISTRO DE TIEMPOS POR ETAPA\n";
    cout << "==============================\n\n" << COLOR_RESET;
    
    cout << COLOR_INFO << "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
    cout << "‚îÇ ETAPA  ‚îÇ   HORAS    ‚îÇ  MINUTOS   ‚îÇ SEGUNDOS   ‚îÇ   TIEMPO   ‚îÇ\n";
    cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" << COLOR_RESET << "\n";
    
    for(int i = 0; i < n; i++) {
        cout << "‚îÇ " << setw(6) << left << (i+1) << " ‚îÇ ";
        cout << setw(10) << left << etapas[i].horas << " ‚îÇ ";
        cout << setw(10) << left << etapas[i].minutos << " ‚îÇ ";
        cout << setw(10) << left << etapas[i].segundos << " ‚îÇ ";
        cout << COLOR_RESULT << setw(10) << left << formatearTiempo(etapas[i]) << COLOR_RESET << " ‚îÇ\n";
    }
    
    cout << COLOR_INFO << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
    cout << "‚îÇ                    TIEMPO TOTAL                 ‚îÇ ";
    cout << COLOR_RESULT << setw(10) << left << formatearTiempo(total) << COLOR_RESET << " ‚îÇ\n";
    cout << COLOR_INFO << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" << COLOR_RESET << "\n\n";
    
    // Mostrar el tiempo total con m√°s detalles
    cout << COLOR_HIGHLIGHT << "‚è±Ô∏è TIEMPO TOTAL EMPLEADO\n";
    cout << "======================\n\n" << COLOR_RESET;
    
    cout << COLOR_INFO << "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
    cout << "‚îÇ            DESGLOSE DE TIEMPO           ‚îÇ\n";
    cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
    cout << "‚îÇ " << left << setw(15) << "Horas:" << left << setw(24) << total.horas << "‚îÇ\n";
    cout << "‚îÇ " << left << setw(15) << "Minutos:" << left << setw(24) << total.minutos << "‚îÇ\n";
    cout << "‚îÇ " << left << setw(15) << "Segundos:" << left << setw(24) << total.segundos << "‚îÇ\n";
    cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
    cout << "‚îÇ " << left << setw(15) << "Tiempo total:" << COLOR_RESULT << left << setw(24) << formatearTiempo(total) << COLOR_INFO << "‚îÇ\n";
    cout << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" << COLOR_RESET << "\n\n";
    
    // Mostrar gr√°fico del tiempo total
    cout << COLOR_HIGHLIGHT << "üìà REPRESENTACI√ìN GR√ÅFICA DEL TIEMPO TOTAL:\n" << COLOR_RESET;
    mostrarGraficoTiempo(total);
    
    // Liberar memoria
    delete[] etapas;
    
    // A√±adir estad√≠sticas adicionales si se registraron m√∫ltiples etapas
    if(n > 1) {
        cout << COLOR_HIGHLIGHT << "üìã ESTAD√çSTICAS ADICIONALES:\n";
        cout << "===========================\n\n" << COLOR_RESET;
        
        cout << COLOR_INFO << "‚úì Promedio por etapa: " << COLOR_RESULT << formatearTiempo({total.horas/n, total.minutos/n, total.segundos/n}) << COLOR_RESET << "\n";
        cout << COLOR_INFO << "‚úì Total de etapas recorridas: " << COLOR_RESULT << n << COLOR_RESET << "\n\n";
    }
    
    // A√±adir instrucciones finales
    cout << "Presione Enter para finalizar...";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cin.get();
    
    return 0;
} 