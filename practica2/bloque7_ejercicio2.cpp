/*
 * üìù COPIA DE CADENAS DE CARACTERES üìù
 * ==================================
 *
 * Bloque 7: Ejercicio 2
 * --------------------
 * Programa que pide al usuario una cadena de caracteres, la almacena en un arreglo
 * y copia todo su contenido hacia otro arreglo de caracteres.
 *
 * Autor: Yoquelvis Abreu
 * Fecha: Marzo 2024
 */

#include <iostream>
#include <iomanip>
#include <string.h> // Para strcpy()
using namespace std;

// Constantes para colores (ANSI escape codes)
const string COLOR_RESET = "\033[0m";
const string COLOR_TITLE = "\033[1;36m";  // Cyan brillante
const string COLOR_HIGHLIGHT = "\033[1;33m";  // Amarillo brillante
const string COLOR_INPUT = "\033[1;32m";  // Verde brillante
const string COLOR_ORIGINAL = "\033[1;34m";  // Azul brillante
const string COLOR_COPY = "\033[1;35m";  // Magenta brillante
const string COLOR_INFO = "\033[1;37m";  // Blanco brillante

// Funci√≥n para limpiar la pantalla
void limpiarPantalla() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}

// Funci√≥n para mostrar el banner del programa
void mostrarBanner() {
    cout << COLOR_TITLE << "\n";
    cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
    cout << "‚ïë     COPIA DE CADENAS DE CARACTERES    ‚ïë\n";
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n" << COLOR_RESET;
}

// Funci√≥n para mostrar una cadena con formato visual
void mostrarCadena(const char* cadena, const char* titulo, string color) {
    int longitud = strlen(cadena);
    
    cout << COLOR_HIGHLIGHT << "\n" << titulo << COLOR_RESET << endl;
    
    // Mostrar cadena con formato de tabla
    // L√≠nea superior
    cout << color << "‚îå";
    for(int i = 0; i < longitud; i++) {
        cout << "‚îÄ‚îÄ‚îÄ";
    }
    cout << "‚îê\n";
    
    // √çndices
    cout << "‚îÇ";
    for(int i = 0; i < longitud; i++) {
        cout << setw(2) << i << " ";
    }
    cout << "‚îÇ\n";
    
    // L√≠nea separadora
    cout << "‚îú";
    for(int i = 0; i < longitud; i++) {
        cout << "‚îÄ‚îÄ‚îÄ";
    }
    cout << "‚î§\n";
    
    // Caracteres
    cout << "‚îÇ";
    for(int i = 0; i < longitud; i++) {
        cout << " " << cadena[i] << " ";
    }
    cout << "‚îÇ\n";
    
    // L√≠nea inferior
    cout << "‚îî";
    for(int i = 0; i < longitud; i++) {
        cout << "‚îÄ‚îÄ‚îÄ";
    }
    cout << "‚îò" << COLOR_RESET << "\n";
    
    // Mostrar informaci√≥n adicional
    cout << COLOR_INFO << "   Longitud: " << longitud << " caracteres\n";
    cout << "   Direcci√≥n de memoria: " << (void*)cadena << COLOR_RESET << "\n";
}

// Funci√≥n para mostrar una animaci√≥n del proceso de copia
void mostrarAnimacionCopia() {
    cout << "\n" << COLOR_HIGHLIGHT;
    cout << "        ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì\n";
    cout << "    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
    cout << "    ‚îÇ  COPIANDO CARACTERES...   ‚îÇ\n";
    cout << "    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n";
    cout << "        ‚Üë ‚Üë ‚Üë ‚Üë ‚Üë ‚Üë ‚Üë ‚Üë ‚Üë ‚Üë\n" << COLOR_RESET;
}

int main() {
    // Limpiar pantalla y mostrar banner
    limpiarPantalla();
    mostrarBanner();
    
    // Declaracion de variables
    char cadena1[100]; // Arreglo original
    char cadena2[100]; // Arreglo de destino
    
    // Explicaci√≥n del programa
    cout << "üìã DESCRIPCI√ìN: Este programa pide una cadena de caracteres al usuario\n";
    cout << "               y la copia a otro arreglo usando la funci√≥n strcpy().\n\n";
    
    // Pedir la cadena al usuario
    cout << COLOR_HIGHLIGHT << "üî§ Ingrese una cadena de caracteres: " << COLOR_INPUT;
    cin.getline(cadena1, 100, '\n');
    cout << COLOR_RESET;
    
    // Mostrar la cadena original
    mostrarCadena(cadena1, "üìä CADENA ORIGINAL:", COLOR_ORIGINAL);
    
    // Mostrar animaci√≥n de copia
    mostrarAnimacionCopia();
    
    // Copiar el contenido de cadena1 a cadena2
    strcpy(cadena2, cadena1);
    
    // Mostrar la cadena copiada
    mostrarCadena(cadena2, "üìã CADENA COPIADA:", COLOR_COPY);
    
    // Explicaci√≥n del proceso
    cout << "\n" << COLOR_HIGHLIGHT << "üìù EXPLICACI√ìN DEL PROCESO:" << COLOR_RESET << endl;
    cout << "1. Se reserv√≥ espacio para dos arreglos de 100 caracteres.\n";
    cout << "2. Se ley√≥ la cadena del usuario al primer arreglo.\n";
    cout << "3. Se utiliz√≥ strcpy() para copiar cada car√°cter al segundo arreglo.\n";
    cout << "4. La copia incluye autom√°ticamente el car√°cter nulo '\\0' al final.\n\n";
    
    // Verificaci√≥n de la copia
    bool sonIguales = (strcmp(cadena1, cadena2) == 0);
    cout << COLOR_HIGHLIGHT << "‚úÖ VERIFICACI√ìN: " << COLOR_RESET;
    
    if(sonIguales) {
        cout << "Las cadenas son id√©nticas, la copia fue exitosa.\n\n";
    } else {
        cout << "Error: Las cadenas no son id√©nticas.\n\n";
    }
    
    // A√±adir instrucciones finales
    cout << "Presione Enter para finalizar...";
    cin.get();
    
    return 0;
} 