/*
 * üìä VISUALIZACI√ìN DE VECTOR CON √çNDICES üìä
 * =======================================
 *
 * Bloque 5: Ejercicio 3
 * --------------------
 * Programa que lee de la entrada est√°ndar un vector de n√∫meros y 
 * muestra en la salida est√°ndar los n√∫meros del vector con sus √≠ndices asociados.
 *
 * Autor: Yoquelvis Abreu
 * Fecha: Marzo 2024
 */

#include <iostream>
#include <iomanip>
using namespace std;

// Constantes para colores (ANSI escape codes)
const string COLOR_RESET = "\033[0m";
const string COLOR_TITLE = "\033[1;36m";  // Cyan brillante
const string COLOR_HIGHLIGHT = "\033[1;33m";  // Amarillo brillante
const string COLOR_INPUT = "\033[1;32m";  // Verde brillante
const string COLOR_TABLE_HEADER = "\033[1;37;44m";  // Blanco brillante sobre azul
const string COLOR_INDEX = "\033[1;34m";  // Azul brillante
const string COLOR_VALUE = "\033[1;35m";  // Magenta brillante

// Funci√≥n para limpiar la pantalla
void limpiarPantalla() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}

// Funci√≥n para mostrar el banner del programa
void mostrarBanner() {
    cout << COLOR_TITLE << "\n";
    cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
    cout << "‚ïë    VISUALIZACI√ìN DE VECTOR CON √çNDICES   ‚ïë\n";
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n" << COLOR_RESET;
}

// Funci√≥n para mostrar el vector con sus √≠ndices en un formato de tabla mejorado
void mostrarVectorConIndices(const int vector[], int tamanio) {
    cout << COLOR_HIGHLIGHT << "\nüìä VECTOR CON √çNDICES:\n";
    cout << "===================\n\n" << COLOR_RESET;
    
    // Encabezado de la tabla con color
    cout << COLOR_TABLE_HEADER << "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
    cout << "‚îÇ   √çNDICE   ‚îÇ    VALOR    ‚îÇ\n";
    cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" << COLOR_RESET << "\n";
    
    // Filas de la tabla
    for(int i = 0; i < tamanio; i++) {
        cout << "‚îÇ " << COLOR_INDEX << setw(10) << i << COLOR_RESET 
             << " ‚îÇ " << COLOR_VALUE << setw(11) << vector[i] << COLOR_RESET << " ‚îÇ\n";
        
        // L√≠nea separadora excepto despu√©s de la √∫ltima fila
        if(i < tamanio-1) {
            cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
        }
    }
    
    // L√≠nea inferior de la tabla
    cout << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n";
}

int main() {
    // Limpiar pantalla y mostrar banner
    limpiarPantalla();
    mostrarBanner();
    
    // Declaracion de variables
    const int MAX = 100;  // Tama√±o m√°ximo del vector
    int numeros[MAX];     // Vector de n√∫meros
    int n;                // Tama√±o real del vector
    
    // Explicaci√≥n del programa
    cout << "üìã DESCRIPCI√ìN: Este programa lee n√∫meros introducidos por el usuario\n";
    cout << "               y muestra el vector con sus √≠ndices asociados.\n\n";
    
    // Solicitar el tama√±o del vector
    do {
        cout << COLOR_HIGHLIGHT << "üìè Ingrese el tama√±o del vector (1-" << MAX << "): " << COLOR_INPUT;
        cin >> n;
        cout << COLOR_RESET;
        
        if(n <= 0 || n > MAX) {
            cout << "\n‚ö†Ô∏è  Error: El tama√±o debe estar entre 1 y " << MAX << ".\n\n";
        }
    } while(n <= 0 || n > MAX);
    
    cout << "\n"; // Salto de l√≠nea entre inputs
    
    // Solicitar los elementos del vector
    cout << COLOR_HIGHLIGHT << "üî¢ Ingrese los elementos del vector:\n";
    cout << "==================================\n" << COLOR_RESET;
    
    for(int i = 0; i < n; i++) {
        cout << COLOR_HIGHLIGHT << "   Elemento [" << i << "]: " << COLOR_INPUT;
        cin >> numeros[i];
        cout << COLOR_RESET;
    }
    
    // Mostrar el vector con sus √≠ndices usando la funci√≥n mejorada
    mostrarVectorConIndices(numeros, n);
    
    // A√±adir instrucciones finales
    cout << COLOR_HIGHLIGHT << "‚úÖ Vector mostrado con √©xito" << COLOR_RESET << "\n\n";
    cout << "Presione Enter para finalizar...";
    cin.ignore();
    cin.get();
    
    return 0;
} 