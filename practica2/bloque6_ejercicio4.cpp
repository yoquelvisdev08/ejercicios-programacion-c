/*
 * üé≤ MATRIZ CON N√öMEROS ALEATORIOS üé≤
 * ===================================
 *
 * Bloque 6: Ejercicio 4
 * --------------------
 * Programa que crea una matriz preguntando al usuario el n√∫mero de filas y columnas,
 * la llena de n√∫meros aleatorios, copia el contenido a otra matriz y la muestra en pantalla.
 *
 * Autor: Yoquelvis Abreu
 * Fecha: Marzo 2024
 */

#include <iostream>
#include <iomanip>
#include <cstdlib> // Para rand() y srand()
#include <ctime>   // Para time()
using namespace std;

// Constantes para colores (ANSI escape codes)
const string COLOR_RESET = "\033[0m";
const string COLOR_TITLE = "\033[1;36m";  // Cyan brillante
const string COLOR_HIGHLIGHT = "\033[1;33m";  // Amarillo brillante
const string COLOR_INPUT = "\033[1;32m";  // Verde brillante
const string COLOR_ROW = "\033[1;35m";  // Magenta brillante
const string COLOR_COL = "\033[1;34m";  // Azul brillante
const string COLOR_VALUE = "\033[1;37m";  // Blanco brillante
const string COLOR_COPY = "\033[1;31m";   // Rojo brillante

// Funci√≥n para limpiar la pantalla
void limpiarPantalla() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}

// Funci√≥n para mostrar el banner del programa
void mostrarBanner() {
    cout << COLOR_TITLE << "\n";
    cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
    cout << "‚ïë     MATRIZ CON N√öMEROS ALEATORIOS     ‚ïë\n";
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n" << COLOR_RESET;
}

// Funci√≥n para mostrar una matriz con formato mejorado
void mostrarMatriz(const int matriz[50][50], int filas, int columnas, string titulo, string color) {
    cout << COLOR_HIGHLIGHT << "\n" << titulo << COLOR_RESET << endl;
    
    // Encabezado de columnas
    cout << "      ";
    for(int j = 0; j < columnas; j++) {
        cout << COLOR_COL << setw(4) << "Col " << j << " " << COLOR_RESET;
    }
    cout << "\n";
    
    // L√≠nea separadora
    cout << "      ";
    for(int j = 0; j < columnas; j++) {
        cout << "--------";
    }
    cout << "\n";
    
    // Contenido de la matriz
    for(int i = 0; i < filas; i++) {
        // √çndice de fila
        cout << COLOR_ROW << " Fila " << setw(1) << i << " |" << COLOR_RESET;
        
        // Valores de la fila
        for(int j = 0; j < columnas; j++) {
            cout << color << setw(7) << matriz[i][j] << " " << COLOR_RESET;
        }
        cout << "\n";
        
        // Separador entre filas (excepto despu√©s de la √∫ltima)
        if(i < filas - 1) {
            cout << "       |";
            for(int j = 0; j < columnas; j++) {
                cout << "--------";
            }
            cout << "\n";
        }
    }
}

// Funci√≥n para mostrar una animaci√≥n del proceso de copia
void mostrarAnimacionCopia() {
    cout << "\n" << COLOR_COPY;
    cout << "        ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì\n";
    cout << "    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
    cout << "    ‚îÇ  COPIANDO DATOS...        ‚îÇ\n";
    cout << "    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n";
    cout << "        ‚Üë ‚Üë ‚Üë ‚Üë ‚Üë ‚Üë ‚Üë ‚Üë ‚Üë ‚Üë\n" << COLOR_RESET;
}

int main() {
    // Limpiar pantalla y mostrar banner
    limpiarPantalla();
    mostrarBanner();
    
    // Declaracion de variables
    const int MAX = 20;     // Tama√±o m√°ximo para mejor visualizaci√≥n
    int matriz1[50][50];    // Primera matriz
    int matriz2[50][50];    // Segunda matriz (copia)
    int filas, columnas;
    
    // Explicaci√≥n del programa
    cout << "üìã DESCRIPCI√ìN: Este programa crea una matriz con n√∫meros aleatorios,\n";
    cout << "               copia el contenido a otra matriz y muestra ambas matrices.\n\n";
    
    // Pedir dimensiones de la matriz con validaci√≥n
    do {
        cout << COLOR_HIGHLIGHT << "üìè Ingrese el n√∫mero de filas (1-" << MAX << "): " << COLOR_INPUT;
        cin >> filas;
        cout << COLOR_RESET;
        
        if(filas <= 0 || filas > MAX) {
            cout << "\n‚ö†Ô∏è  Error: El n√∫mero de filas debe estar entre 1 y " << MAX << ".\n\n";
        }
    } while(filas <= 0 || filas > MAX);
    
    cout << "\n"; // Salto de l√≠nea entre inputs
    
    do {
        cout << COLOR_HIGHLIGHT << "üìè Ingrese el n√∫mero de columnas (1-" << MAX << "): " << COLOR_INPUT;
        cin >> columnas;
        cout << COLOR_RESET;
        
        if(columnas <= 0 || columnas > MAX) {
            cout << "\n‚ö†Ô∏è  Error: El n√∫mero de columnas debe estar entre 1 y " << MAX << ".\n\n";
        }
    } while(columnas <= 0 || columnas > MAX);
    
    // Inicializar la semilla para los n√∫meros aleatorios
    srand(time(NULL));
    
    // Informar al usuario
    cout << "\n" << COLOR_HIGHLIGHT << "üé≤ Generando matriz " << filas << "x" << columnas << " con n√∫meros aleatorios..." << COLOR_RESET << endl;
    
    // Llenar la matriz con n√∫meros aleatorios
    for(int i = 0; i < filas; i++) {
        for(int j = 0; j < columnas; j++) {
            matriz1[i][j] = rand() % 100; // N√∫meros aleatorios entre 0 y 99
        }
    }
    
    // Mostrar la matriz original
    mostrarMatriz(matriz1, filas, columnas, "üìä MATRIZ ORIGINAL:", COLOR_VALUE);
    
    // Mostrar animaci√≥n de copia
    mostrarAnimacionCopia();
    
    // Copiar los datos a la segunda matriz
    for(int i = 0; i < filas; i++) {
        for(int j = 0; j < columnas; j++) {
            matriz2[i][j] = matriz1[i][j];
        }
    }
    
    // Mostrar la matriz copia
    mostrarMatriz(matriz2, filas, columnas, "üìã MATRIZ COPIA:", COLOR_COPY);
    
    // A√±adir instrucciones finales
    cout << "\n" << COLOR_HIGHLIGHT << "‚úÖ Proceso completado con √©xito" << COLOR_RESET << "\n\n";
    cout << "Presione Enter para finalizar...";
    cin.ignore();
    cin.get();
    
    return 0;
} 